if ((!i %in%  exclude)) {
i2 = i
# print(i)
# i2
# if (i > 140){
#   i2 = as.numeric(i) + 1
# }
# else if (i >= 215){
#   i2 = as.numeric(i) + 5
# }
# else if (i >= 450){
#   i2 = i + 5
# }
# else if (i == "216"){
#   i2 = "AliPos 216"
# }
# if (i == "217"){
#   i2 = "AliPos 217"
# }
#
bottoms <- c(339,343, 426, 429, 435, 576, 580, 587)
switchers <- c(8,15,65,111,211,331,339,348,354,426,429,435,516,576,580,587,592)
if ( i %in%  switchers) {
x1  = factor(data[,lst[i]], levels=c(pen_freq, most_freq))
# levels(data[,lst[i]])[1] <- pen_freq
# levels(data[,lst[i]])[2] <- most_freq
cat("Plotting", i, lst[i], "\n")
hey= gsub("X", "", pos[lst[i2]])
hello = format(wilc.pmass[lst[i]], scientific=T, digits = 3)
headr = paste(hey, ": P = ",
as.character(hello), sep="")
v = as.numeric(x1) - 1
if (i %in% bottoms){
line_pos = -12
adj_pos = 0.8
} else{
line_pos = -2
adj_pos = 0.1
}
x = log(as.numeric(mass))
mylist = c()
for (i in as.numeric(clade2)){
if (is.na(i)){
mylist <- c(mylist, "blue")
}
else if (i == 1){
mylist <- c(mylist, "blue")
}
else if (i == 2){
mylist <- c(mylist, "black")
}
}
plot(x, v, pch=c(22,2)[as.numeric(clade2)], yaxt="n", col = mylist, xlab="", ylab="" )
title(headr, line = line_pos, adj = adj_pos)
axis(2, at=c(0,1), labels=levels(x1), las=2)
g=glm(v ~ x, family="binomial")
#    lines(x[!is.na(v)], fitted(g), col="red")
xx = x[!is.na(v)]
lines(xx[order(xx)], fitted(g)[order(xx)], col="red")
}
else {
cat("Plotting", i, lst[i], "\n")
hey= gsub("X", "", pos[lst[i2]])
hello = format(wilc.pmass[lst[i]], scientific=T, digits = 3)
print(hello)
headr = paste(hey, ": P = ",
as.character(hello), sep="")
v = as.numeric(data[,lst[i]]) - 1
if (i %in% bottoms){
print("Hlleoeooeoeoeoeoeo")
line_pos = -12
adj_pos = 0.8
} else{
line_pos = -2
adj_pos = 0.1
}
x = log(as.numeric(mass))
mylist = c()
for (i in as.numeric(clade2)){
if (is.na(i)){
mylist <- c(mylist, "blue")
}
else if (i == 1){
mylist <- c(mylist, "blue")
}
else if (i == 2){
mylist <- c(mylist, "black")
}
}
plot(x, v, pch=c(22,2)[as.numeric(clade2)], yaxt="n", col = mylist, xlab="", ylab="" )
title(headr, line = line_pos, adj = adj_pos)
axis(2, at=c(0,1), labels=levels(data[,lst[i]]), las=2)
g=glm(v ~ x, family="binomial")
#    lines(x[!is.na(v)], fitted(g), col="red")
xx = x[!is.na(v)]
lines(xx[order(xx)], fitted(g)[order(xx)], col="red")
}
} }
}
#--------------------------------------------------------------------
# These are the plots of p-values. The top plot shows the p-value
# based on the Fisher test for association with clade. The bottom
# plot shows the p-value for the Wilcoxon test for difference
# in log(mass). P-values are shown on a log-scale (log to the base e)
# The horizontal lines show various P-values
#--------------------------------------------------------------------
# xpos = 0.9 * ncol(data)
# par(mfrow=c(2,1))
# plot(1:ncol(data), -log(p.clade), pch=20, main="Association with clade")
# axis(1,  at=c(seq(0, 800, by=100),
#      labels= c(seq(0, 800, by=100))))
# minor.tick(nx = 10)
#
# # seq(0, 800, by=100)
# abline(h=-log(0.05), col="gray")
# text(xpos, -log(0.05), "P = 0.05", col="gray")
# abline(h=-log(0.01), col="blue")
# text(xpos, -log(0.01), "P = 0.01", col="blue")
# abline(h=-log(0.001), col="red")
# text(xpos, -log(0.001), "P = 0.001", col="red")
# abline(h=-log(0.001/ncol(data)), v=log(0.05/ncol(data)), col="green")
#
#
# plot(1:ncol(data), -log(wilc.pmass), pch=20, main="P-value for trend")
# axis(1,  at=c(seq(0, 800, by=100),
#               labels= c(seq(0, 800, by=100))))
# minor.tick(nx = 10)
#
# abline(h=-log(0.05), col="gray")
# text(xpos, -log(0.05), "P = 0.05", col="gray")
# abline(h=-log(0.01), col="blue")
# text(xpos, -log(0.01), "P = 0.01", col="blue")
# abline(h=-log(0.001), col="red")
# text(xpos, -log(0.001), "P = 0.001", col="red")
# abline(h=-log(0.001/ncol(data)), v=log(0.05/ncol(data)), col="green")
#
#   #-------------------------------------------------------------
#   # Finally, look at possible association between positions
#   # For each pair of columns, create a 2x2 table showing the two
#   # commonest amino acids at each position. Then do a Fisher
#   # exact test to determine if any significant assocation.
#   # Display all pairs for which the significance level is
#   # below the value cutoff
#   #-------------------------------------------------------------
# cutoff = 0.001
# kount = 0
# pos1 = pos2 = character(1000)
# pval = numeric(1000)
#
# m = matrix(0, ncol(data), ncol(data))
#
# for (i in 1:(ncol(data)-1)) {
#   m[i,ncol(data)+1-i] = 1
#   for (j in (i+1):ncol(data)) {
#     tt = tapply(1:nrow(data), list(data[,i], data[,j]), length)
#     tt[is.na(tt)] = 0
#
#     if (nrow(tt) >= 2 & ncol(tt) >= 2) {
#
#        m[i,ncol(data)+1-j] = fisher.test(tt)$p.value
#
#
#       if (m[i,ncol(data)+1-j] < cutoff) {
#         kount = kount + 1
#         pos1[kount] = pos[i]
#         pos2[kount] = pos[j]
#         pval[kount] = m[i,ncol(data)+1-j]
#         # cat(pos[i],pos[j], m[i,ncol(data)+1-j],"\n")
#         # print(tt)
#         # cat("\n")
#       }
#     }
#     m[ncol(data)+1-i, j] = m[i,ncol(data)+1-j]
#   }
# }
# m[ncol(data),1] = 1
# noquote(head(cbind(pos1, pos2, round(pval,7)), n=kount))
#---------------------------------
# Close the pdf file with graphics
#---------------------------------
dev.off()
library(ncar)
#-----------------------------------------------
# Store graphics in a pdf file. Comment out this
# line incar v0.3.4f you want plots to the screen
#-----------------------------------------------
setwd("/home/jake/Documents/projects/myosin/git/chimera/scripts/")
pdf("../figures/transitions.pdf", paper="a4", width = 8.3, height = 11.7)
#---------------------------------------------------
# Threshold for running analysis. Analyses are only
# run if there are at least 2 different amino acids.
# (Only the first 2 are kept, others are replaced by
# missing values).
# Also, the analysis is only run if
# freq_2 / freq_1 > threshold
# where freq_1 and freq_2 are the frequencies of the
# commonest and second commonest alleles
#---------------------------------------------------
threshold = 0.1
#-------------------------------------------
# Initial processing of data - read the data
# and extract the mass and clade columns
#-------------------------------------------
dd <- read.csv("../data/myh7_plot_H_.csv",header=TRUE,
colClasses = c("factor", "factor", "factor", "numeric",
rep("factor", 808)))
mass = dd$Mass
clade = dd$Clade
#---------------------------------------------------------------
# Only consider clades Euarchontoglires and Laurasiatheria
# Replace clades Afrotheria (4 values) and Metatheria (2 values)
# by missing values
#---------------------------------------------------------------
c2 = clade
# c2
c2[clade %in% levels(clade)[c(1,4)]] = NA
clade2 = factor(as.numeric(c2))
levels(clade2) = c("E", "L")
#----------------------------------------------
# Store the column names (for labelling figure)
#----------------------------------------------
pos = colnames(data)
# pos
#--------------------------------------------------------------
# Create data frame (data) that ONLY stores the amino acid data
# Also keep a copy of this, called data.old
#--------------------------------------------------------------
data = dd[,-(1:4)]
# data
n.columns = ncol(data)
# n.columns
data.old = data
#--------------------------------------------------------
# For each column, identify the two most common sequences
# and replace the others by missing values
#--------------------------------------------------------
logr.pmass = wilc.pmass = logr.prank = wilc.prank =
p.clade = numeric(n.columns)
#--------------------------------
# Run through each column in turn
#--------------------------------
for (j in 1:n.columns) {
#--------------------------------------------------------
# For each column, identify the two most common sequences
# and replace the others by missing values
#--------------------------------------------------------
cat(j, pos[j], sort(tabulate(data[,j]), decreasing=TRUE), "\n")
aas = levels(data[,j])
freqs = tabulate(data[,j])
of = order(freqs, decreasing=TRUE)
tmp = numeric(length(data[,j]))
tmp[!( data[,j] == aas[of][1])] = 1
tmp[!( data[,j] == aas[of][2])] = 0
tmp[!( data[,j] %in% aas[of][1:2])] = NA
tmp = factor(tmp)
levels(tmp) = aas[of][1:2]
data[,j] = tmp
# The following section of code only works if there are
# at least two distinct amino acids at the site
# (What you have is fine, but can also replace with alternative)
#  if (length(levels(data[,j])) != 1){
run.j = FALSE
if (nlevels(data[,j]) > 1) {
if (freqs[of][2] / freqs[of][1] > threshold) run.j = TRUE
}
if (run.j) {
cat("Running", j, "\n")
#-------------------------------------------------------
# x = rank position, v = y-variable, coded as 0 or 1 for
# logistic regression
#-------------------------------------------------------
x = 1:nrow(data)
v = as.numeric(data[,j]) - 1
#------------------------------------------------------
# Do a Wilcoxon test to see if rank position differs
# significantly between the two most common amino acids
# Save the p-value for this. Also save the slope
# parameter from logistic regression
#------------------------------------------------------
wilc = wilcox.test(x~data[,j])
wilc.prank[j] = wilc$p.value
g=glm(v ~ x, family="binomial")
logr.prank[j] = summary(g)$coef[2,4]
#------------------------------------------------------
# Do a Wilcoxon test to see if log(mass) differs
# significantly between the two most common amino acids
# Save the p-value for this. Also save the slope
# parameter from logistic regression
# (May get warning messages about ties)
#------------------------------------------------------
x = log(as.numeric(mass))
wilc = wilcox.test(x~data[,j])
wilc.pmass[j] = wilc$p.value
g=glm(v ~ x, family="binomial")
logr.pmass[j] = summary(g)$coef[2,4]
#------------------------------------------------------
# Create a 2x2 table comparing the two clades (E and L)
# and the two (commonest) types of amino acid
# Test for a significant association using Fisher's
# exact test
#------------------------------------------------------
tt = tapply(1:nrow(data), list(clade2, data[,j]), length)
tt[is.na(tt)] = 0
# print(tt)
p.clade[j] = fisher.test(tt)$p.value
}
}
#---------------------------
# Use a 5 x 3 array of plots
#---------------------------
par(mfrow=c(4,3), par(mar=c(4,2.5,2.5,1) + 0.1))
k=1
lst = (k-1)*15 + 1:15
lst = 1:n.columns
#----------------------------------------------------------------
# For each column, plot the two commonest amino acids against the
# log(mass). Include the logistic regression line. The p-value in
# The p-value in the header is from the Wilcoxon test based on
# the log-mass. p-value is rounded to 4 decimal places, so '0'
# just means 'P<0.00005'
#----------------------------------------------------------------
for (i in 1:length(lst)) {
run.i = FALSE
freqs = tabulate(data[,lst[i]])
if (nlevels(data[,lst[i]]) == 2) {
if (freqs[2]/freqs[1] > threshold) run.i = TRUE
}
if (run.i) {
most_freq = levels(data[,lst[i]])[1]
pen_freq = levels(data[,lst[i]])[2]
exclude <- c(77,125, 331,354, 808)
if ((!i %in%  exclude)) {
i2 = i
# print(i)
# i2
# if (i > 140){
#   i2 = as.numeric(i) + 1
# }
# else if (i >= 215){
#   i2 = as.numeric(i) + 5
# }
# else if (i >= 450){
#   i2 = i + 5
# }
# else if (i == "216"){
#   i2 = "AliPos 216"
# }
# if (i == "217"){
#   i2 = "AliPos 217"
# }
#
bottoms <- c(339,348, 426, 429, 435, 576, 580, 587)
switchers <- c(8,15,65,111,211,331,339,348,354,426,429,435,516,576,580,587,592)
if ( i %in%  switchers) {
x1  = factor(data[,lst[i]], levels=c(pen_freq, most_freq))
# levels(data[,lst[i]])[1] <- pen_freq
# levels(data[,lst[i]])[2] <- most_freq
cat("Plotting", i, lst[i], "\n")
hey= gsub("X", "", pos[lst[i2]])
hello = format(wilc.pmass[lst[i]], scientific=T, digits = 3)
headr = paste(hey, ": P = ",
as.character(hello), sep="")
v = as.numeric(x1) - 1
if (i %in% bottoms){
line_pos = -12
adj_pos = 0.8
} else{
line_pos = -2
adj_pos = 0.1
}
x = log(as.numeric(mass))
mylist = c()
for (i in as.numeric(clade2)){
if (is.na(i)){
mylist <- c(mylist, "blue")
}
else if (i == 1){
mylist <- c(mylist, "blue")
}
else if (i == 2){
mylist <- c(mylist, "black")
}
}
plot(x, v, pch=c(22,2)[as.numeric(clade2)], yaxt="n", col = mylist, xlab="", ylab="" )
title(headr, line = line_pos, adj = adj_pos)
axis(2, at=c(0,1), labels=levels(x1), las=2)
g=glm(v ~ x, family="binomial")
#    lines(x[!is.na(v)], fitted(g), col="red")
xx = x[!is.na(v)]
lines(xx[order(xx)], fitted(g)[order(xx)], col="red")
}
else {
cat("Plotting", i, lst[i], "\n")
hey= gsub("X", "", pos[lst[i2]])
hello = format(wilc.pmass[lst[i]], scientific=T, digits = 3)
print(hello)
headr = paste(hey, ": P = ",
as.character(hello), sep="")
v = as.numeric(data[,lst[i]]) - 1
if (i %in% bottoms){
print("Hlleoeooeoeoeoeoeo")
line_pos = -12
adj_pos = 0.8
} else{
line_pos = -2
adj_pos = 0.1
}
x = log(as.numeric(mass))
mylist = c()
for (i in as.numeric(clade2)){
if (is.na(i)){
mylist <- c(mylist, "blue")
}
else if (i == 1){
mylist <- c(mylist, "blue")
}
else if (i == 2){
mylist <- c(mylist, "black")
}
}
plot(x, v, pch=c(22,2)[as.numeric(clade2)], yaxt="n", col = mylist, xlab="", ylab="" )
title(headr, line = line_pos, adj = adj_pos)
axis(2, at=c(0,1), labels=levels(data[,lst[i]]), las=2)
g=glm(v ~ x, family="binomial")
#    lines(x[!is.na(v)], fitted(g), col="red")
xx = x[!is.na(v)]
lines(xx[order(xx)], fitted(g)[order(xx)], col="red")
}
} }
}
#--------------------------------------------------------------------
# These are the plots of p-values. The top plot shows the p-value
# based on the Fisher test for association with clade. The bottom
# plot shows the p-value for the Wilcoxon test for difference
# in log(mass). P-values are shown on a log-scale (log to the base e)
# The horizontal lines show various P-values
#--------------------------------------------------------------------
# xpos = 0.9 * ncol(data)
# par(mfrow=c(2,1))
# plot(1:ncol(data), -log(p.clade), pch=20, main="Association with clade")
# axis(1,  at=c(seq(0, 800, by=100),
#      labels= c(seq(0, 800, by=100))))
# minor.tick(nx = 10)
#
# # seq(0, 800, by=100)
# abline(h=-log(0.05), col="gray")
# text(xpos, -log(0.05), "P = 0.05", col="gray")
# abline(h=-log(0.01), col="blue")
# text(xpos, -log(0.01), "P = 0.01", col="blue")
# abline(h=-log(0.001), col="red")
# text(xpos, -log(0.001), "P = 0.001", col="red")
# abline(h=-log(0.001/ncol(data)), v=log(0.05/ncol(data)), col="green")
#
#
# plot(1:ncol(data), -log(wilc.pmass), pch=20, main="P-value for trend")
# axis(1,  at=c(seq(0, 800, by=100),
#               labels= c(seq(0, 800, by=100))))
# minor.tick(nx = 10)
#
# abline(h=-log(0.05), col="gray")
# text(xpos, -log(0.05), "P = 0.05", col="gray")
# abline(h=-log(0.01), col="blue")
# text(xpos, -log(0.01), "P = 0.01", col="blue")
# abline(h=-log(0.001), col="red")
# text(xpos, -log(0.001), "P = 0.001", col="red")
# abline(h=-log(0.001/ncol(data)), v=log(0.05/ncol(data)), col="green")
#
#   #-------------------------------------------------------------
#   # Finally, look at possible association between positions
#   # For each pair of columns, create a 2x2 table showing the two
#   # commonest amino acids at each position. Then do a Fisher
#   # exact test to determine if any significant assocation.
#   # Display all pairs for which the significance level is
#   # below the value cutoff
#   #-------------------------------------------------------------
# cutoff = 0.001
# kount = 0
# pos1 = pos2 = character(1000)
# pval = numeric(1000)
#
# m = matrix(0, ncol(data), ncol(data))
#
# for (i in 1:(ncol(data)-1)) {
#   m[i,ncol(data)+1-i] = 1
#   for (j in (i+1):ncol(data)) {
#     tt = tapply(1:nrow(data), list(data[,i], data[,j]), length)
#     tt[is.na(tt)] = 0
#
#     if (nrow(tt) >= 2 & ncol(tt) >= 2) {
#
#        m[i,ncol(data)+1-j] = fisher.test(tt)$p.value
#
#
#       if (m[i,ncol(data)+1-j] < cutoff) {
#         kount = kount + 1
#         pos1[kount] = pos[i]
#         pos2[kount] = pos[j]
#         pval[kount] = m[i,ncol(data)+1-j]
#         # cat(pos[i],pos[j], m[i,ncol(data)+1-j],"\n")
#         # print(tt)
#         # cat("\n")
#       }
#     }
#     m[ncol(data)+1-i, j] = m[i,ncol(data)+1-j]
#   }
# }
# m[ncol(data),1] = 1
# noquote(head(cbind(pos1, pos2, round(pval,7)), n=kount))
#---------------------------------
# Close the pdf file with graphics
#---------------------------------
dev.off()
